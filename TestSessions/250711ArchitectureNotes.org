#+title: 250711architecture Notes

How Avatar works:

: * instance variable "sessionData"

Instance variable "sessionData" loads osc data from sessions recorded from Rokoko.


: * instance variable "animator"

Animator plays back data from sequences of messages received from sessionData, or from live input.

Animator also change data before sending them.  This is done through filters.  Animator instance variable =filter= is an array of the same size as the osc messages sent.  To change the value of a slot in the message array, one places a FilterAdapter in that slot.  For example:

#+begin_src sclang
Avatar.addFilter(\hipx, { 2 });
#+end_src

This substitutes the constant value 2 in the message array, at the position for joint \hip, dimension \x.

One can also use 2 more values for this control:
1. The orignal value of the message at the specified slot
2. The value of the control bus used for synth-level modification.
Both of these values are given to the function as arguments, like this:

#+begin_src sclang
// add the value from the message to the value from the bus
Avatar.addFilter(\hipx, { | msgVal, ctlVal |
	msgVal + ctlVal
});
#+end_src
* instance variable =controller=

Instance variable =controller= contains an instance of AnimationController.

The AnimationController instance contains:
- instance variable =ctlbus=: A bus where control synths can write values used to set or to modify single slots in the osc message before sending.
- instance variable =animbus=: A bus where the controller sets the values received from the messages played, one value per each numeric slot.
- sclsynths: A dictionary for managing synths that write to ctlbus
- animsynths: A dictionary for managing synths that operate on animbus

* reading and writing mechanism

{ Out.kr(0, LFSaw.kr(1).range(0.0, 1.0)) }.play;
