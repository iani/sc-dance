#+title: SC-Dance: A Library for Animation and Sonification via Networked Live Coding

* How Avatar works:

** instance variable "sessionData"

Instance variable "sessionData" loads osc data from sessions recorded from Rokoko.

** instance variable "animator"

Animator plays back data from sequences of messages received from sessionData, or from live input.

Animator also change data before sending them.  This is done through filters.  Animator instance variable =filter= is an array of the same size as the osc messages sent.  To change the value of a slot in the message array, one places a FilterAdapter in that slot.  For example:

#+begin_src sclang
Avatar.addFilter(\hipx, { 2 });
#+end_src

This substitutes the constant value 2 in the message array, at the position for joint \hip, dimension \x.

One can also use 2 more values for this control:
1. The orignal value of the message at the specified slot
2. The value of the control bus used for synth-level modification.
Both of these values are given to the function as arguments, like this:

#+begin_src sclang
// add the value from the message to the value from the bus
Avatar.addFilter(\hipx, { | msgVal, ctlVal |
	msgVal + ctlVal
});
#+end_src
** instance variable =controller=

Instance variable =controller= contains an instance of AnimationController.

The AnimationController instance contains:
- instance variable =ctlbus=: A bus where control synths can write values used to set or to modify single slots in the osc message before sending.
- instance variable =animbus=: A bus where the controller sets the values received from the messages played, one value per each numeric slot.
- sclsynths: A dictionary for managing synths that write to ctlbus
- animsynths: A dictionary for managing synths that operate on animbus

* Reading, modifying and writing animation messages

** Animation message sources

Animation messages can be produced from 2 sources:

1. The Animator instance stored inside Avatar.

   The Animator instance plays back sequences of messages loaded from file. Per default it loops through these messages in series, at a rate of 30 frames per second.  One can change both the message order and the time interval by setting the instance variables messages and times to patterns.

2. Messages received from sclang via OSC.  These messages must start with '/rokoko/' and must have a format compatible with the formats found in recorded sessions (See section about rokoko message format).

** Modifying animation messages

Animation messages can be modified before sendint them to GODOT or using them for sound.  This is done by functions stored inside instances of JointFilter.
Each element in an animation message array can have its own JointFilter.  The JointFilter instance calls the function stored in its instance variable =func=, passing it as arguments:

1. The value of the message at the position corresponding to the filter.
2. The value of the control bus at the position corresponding to the filter.

** Interaction with the synth engine (scsynth)

Interaction with the synth engine is done via 2 buses contained in instance variables =ctlbus= and =animbus= of class =AnimationController=.  Each avatar stores its own AnimationController in variable =controller=. The buses are:

1. =ctlbus=: This bus contains values that can be changed by the user either through a set message or by a synth that is writing to them. AnimationController polls =ctlbus= 30 frames per second, and stores its values in instance variable =ctlvalues= of AnimationController. From there, instances of JointFilter can use these values to modify the incoming message values according to the filter function provided by the user.
2. =animbus=: This bus contains the values of each animation message received either from Animator or remotely via OSC.

   The control signals of =animbus= can be used to drive sound animation.
